#   Copyright 2022 Red Hat, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#

import argparse
import logging
import os
import yaml

from osc_lib.command import command
from osc_lib.i18n import _

from tripleoclient import constants
from tripleoclient import utils


LOG = logging.getLogger(__name__ + ".Observability")


class ObservabilityBase(command.Command):
    """Base class for observability commands."""

    def get_parser(self, prog_name):
        parser = argparse.ArgumentParser(
            description=self.get_description(),
            prog=prog_name,
            add_help=False
        )
        parser.add_argument(
            '-p',
            '--playbook-base-dir',
            default=constants.ANSIBLE_TRIPLEO_PLAYBOOKS,
            help=_(
                "Path to directory where observability playbooks are being "
                "stored. Modify this only if you know what you are doing."
            )
        )
        parser.add_argument(
            '-i',
            '--inventory',
            default='/home/stack/tripleo-inventory.yaml',
            help=_(
                "Tripleo inventory file generated by tripleo-ansible-inventory"
                " command. Defaults to: /home/stack/tripleo-inventory.yaml."
            )
        )
        return parser

    def _run_playbook(self, playbook, parsed_args, tags=None):
        """Run ansible playbook"""
        with utils.TempDirs() as tmpdir:
            utils.run_ansible_playbook(
                playbook=playbook,
                inventory=parsed_args.inventory,
                workdir=tmpdir,
                playbook_dir=parsed_args.playbook_base_dir,
                tags=tags,
                verbosity=utils.playbook_verbosity(self=self)
            )


class Setup(ObservabilityBase):
    """Install and configure given Observability component(s)"""

    def get_parser(self, prog_name):
        parser = super().get_parser(prog_name)
        parser.add_argument(
            'components',
            nargs='+',
            choices=[
                'ceilometer',
                'collectd',
                'prometheus_agent',
                'push_gateway',
                'qdr'
            ]
        )
        return parser

    def take_action(self, parsed_args):
        for component in parsed_args.components:
            self._run_playbook(
                playbook='%s.yaml' % component,
                parsed_args=parsed_args,
                tags='setup'
            )
